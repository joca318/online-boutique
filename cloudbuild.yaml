#Scan1
steps:
   - id: scan
     name: gcr.io/google.com/cloudsdktool/cloud-sdk
     entrypoint: bash
     args: 
     - '-c'
     - |
       for i in $(gcloud artifacts docker images list us-docker.pkg.dev/$_MAIN_PROJECT_ID/gcr.io/ --format='value(package,version)' | awk  '{print $1 "@" $$NF}'); do gcloud artifacts docker images scan $i --location us --remote --format='value(response.scan)' >> /workspace/scan_id.txt; done
   - id: severity check
     name: gcr.io/google.com/cloudsdktool/cloud-sdk
     entrypoint: bash
     waitFor: ['scan']
     args:
     - '-c'
     - |-
       for i in $(cat /workspace/scan_id.txt); do
           gcloud artifacts docker images list-vulnerabilities $i \ 
           --location us --format='value(vulnerability.effectiveSeverity)'| if grep -Fxq $_SEVERITY; then
                                                                            echo 'Failed vulnerability check' && exit 1
                                                                                  break
                                                                            else exit 0
                                                                            fi
       done
     env:
     - 'SEVERITY=$_SEVERITY'
     # Create release in Google Cloud Deploy
   - id: create release in google cloud deploy
     name: gcr.io/google.com/cloudsdktool/cloud-sdk
     entrypoint: gcloud
     waitFor: ['severity check'] 
     args:
       [
         "deploy", "releases", "create", "rel-${SHORT_SHA}",
         "--delivery-pipeline", "boutique-demo-app01",
         "--region", "us-central1",
         "--annotations", "commitId=${REVISION_ID}"
       ]
     #entrypoint: bash
     #waitFor: ['severity check'] 
     #args:
     #- '-c'
     #- |
     #  gcloud deploy releases create rel-$(date +%s) --delivery-pipeline boutique-demo-app01 \
     #  --region us-central1 --annotations commitId=${REVISION_ID}