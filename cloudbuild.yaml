#Scan1
steps:
   - id: scan
     name: gcr.io/google.com/cloudsdktool/cloud-sdk
     entrypoint: bash
     args: 
     - '-c'
     - |
       gcloud artifacts docker images scan us-docker.pkg.dev/$_MAIN_PROJECT_ID/gcr.io/adservice:latest --location us --remote \
       --format='value(response.scan)' > /workspace/scan_id.txt
   - id: severity check
     name: gcr.io/google.com/cloudsdktool/cloud-sdk
     entrypoint: bash
     waitFor: ['scan']
     args:
     - '-c'
     - |
       gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
       --format='value(vulnerability.effectiveSeverity)' --location us | if grep -Fxq $_SEVERITY; \
       then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
     env:
     - 'SEVERITY=$_SEVERITY'
     # Create release in Google Cloud Deploy
   - id: create release in google cloud deploy
     name: gcr.io/google.com/cloudsdktool/cloud-sdk
     entrypoint: gcloud
     waitFor: ['severity check'] 
     args:
       [
         "deploy", "releases", "create", "rel-${SHORT_SHA}",
         "--delivery-pipeline", "boutique-demo-app01",
         "--region", "us-central1",
         "--annotations", "commitId=${REVISION_ID}"
       ]
     #entrypoint: bash
     #waitFor: ['severity check'] 
     #args:
     #- '-c'
     #- |
     #  gcloud deploy releases create rel-$(date +%s) --delivery-pipeline boutique-demo-app01 \
     #  --region us-central1 --annotations commitId=${REVISION_ID}